MEMORY {
ZP:   start = $0000, size = $90, type = rw, define = yes;
RAM:  start = $0200, size = $1600, type = rw, define = yes;
SWROM: start = $BC00, size = $300; 
ROM:  start = $C000, size = $3900, fill=yes, fillval=$ff, file = %O, define = yes;
ROMF: start = $F900, size = $300, fill=yes, fillval=$ff, file = %O, define = yes;
ROM2: start = $FC00, size = $300, fill=yes, fillval=$ff, file = %O, define = yes;
ROM3: start = $FF00, size = $FA,  fill=yes, fillval=$ff, file = %O, define = yes;
ROM4: start = $FFFA, size = $6,   fill=yes, fillval=$ff, file = %O, define = yes;
}
SEGMENTS {
ROMHDR:   load = ROM, type = ro;
FONT:     load = ROMF, type = ro, align = $100;
#STARTUP:  load = ROM, type = ro;
LOWCODE:  load = ROM, run = RAM, type = ro,  define = yes, optional = yes;
INIT:     load = ROM, type = ro, define = yes, optional = yes;
CODE:     load = ROM, type = ro;
CODEHW:   load = ROM2, run = SWROM, type = ro, optional = yes;
CODETOP:  load = ROM3, type = ro;
RODATA:   load = ROM, type = ro;
VECTORS:  load = ROM4, type = ro;
DATA:     load = ROM, run = RAM, type = rw, define = yes;
BSS:      load = RAM, type = bss, define = yes;
HEAP:     load = RAM, type = bss, define = yes, optional = yes;
ZEROPAGE: load = ZP,  type = zp;
}
FEATURES {
CONDES: segment = INIT,
type = constructor,
label = __CONSTRUCTOR_TABLE__,
count = __CONSTRUCTOR_COUNT__;
CONDES: segment = RODATA,
type = destructor,
label = __DESTRUCTOR_TABLE__,
count = __DESTRUCTOR_COUNT__;
CONDES: type = interruptor,
segment = RODATA,
label = __INTERRUPTOR_TABLE__,
count = __INTERRUPTOR_COUNT__;
}
SYMBOLS {
__STACKTOP__: type = weak, value = __RAM_START__+__RAM_SIZE__-1;
}



