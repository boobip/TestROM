MEMORY {
	ZP:   start = $0000, size = $100, type = rw, define = yes;
#	ZP2:  start = $0090, size = $70, type = rw, define = yes;
	RAM:  start = $0200, size = $1600, type = rw, define = yes;
	SWROM8000: start = $8000, size = $100;
	SWROM: start = $BC00, size = $300;
	ROM:  start = $C000, size = $3C00, fill=yes, fillval=$ff, file = %O, define = yes;
	ROM2: start = $FC00, size = $300,  fill=yes, fillval=$ff, file = %O, define = yes;
	ROM3: start = $FF00, size = $100,  fill=yes, fillval=$ff, file = %O, define = yes;
}
SEGMENTS {
	ROMHDR:   load = ROM, run = SWROM8000, type = ro;
	CODEHW:   load = ROM2, run = SWROM, type = ro, optional = yes;
	RODATAHW: load = ROM2, run = SWROM, type = ro;
#	STARTUP:  load = ROM, type = ro;
	LOWCODE:  load = ROM, run = RAM, type = ro,  define = yes, optional = yes;
	INIT:     load = ROM, type = ro, define = yes, optional = yes;
	CODE:     load = ROM, type = ro;
	RODATA:   load = ROM, type = ro;
	STRINGS:  load = ROM, type = ro, define = yes;
	ADDRLUTLO:load = ROM, type = ro, define = yes;
	ADDRLUTHI:load = ROM, type = ro, define = yes;
	DATA:     load = ROM, run = RAM, type = rw, define = yes;
	FONT:     load = ROM, type = ro, start = $F900;
	CODETOP:  load = ROM3, type = ro;
	VECTORS:  load = ROM3, type = ro, start = $FFFA;
	BSS:      load = RAM, type = bss, define = yes;
	HEAP:     load = RAM, type = bss, define = yes, optional = yes;
	ZEROPAGE: load = ZP, type = zp;
	ZPBSS:	  load = ZP, type = zp, start = $0090;
}
FEATURES {
	CONDES: segment = INIT,
	type = constructor,
	label = __CONSTRUCTOR_TABLE__,
	count = __CONSTRUCTOR_COUNT__;
	CONDES: segment = RODATA,
	type = destructor,
	label = __DESTRUCTOR_TABLE__,
	count = __DESTRUCTOR_COUNT__;
	CONDES: type = interruptor,
	segment = RODATA,
	label = __INTERRUPTOR_TABLE__,
	count = __INTERRUPTOR_COUNT__;
}
SYMBOLS {
	__STACKTOP__: type = weak, value = __RAM_START__+__RAM_SIZE__-1;
}



